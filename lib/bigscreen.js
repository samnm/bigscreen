// Generated by CoffeeScript 1.4.0
(function() {
  var ad, app, browser, exec, express, ffmpeg, makeRequest, mdns, os, puts, readline, receiveCommand, request, requestCommand, rl, servers, streams, sys;

  mdns = require('mdns');

  express = require('express');

  sys = require('sys');

  exec = require('child_process').exec;

  os = require('os');

  ffmpeg = require('fluent-ffmpeg');

  request = require('request');

  readline = require('readline');

  puts = function(error, stdout, stderr) {
    return sys.puts(stdout);
  };

  receiveCommand = function(command) {
    return exec("open " + command, puts);
  };

  streams = {};

  ad = mdns.createAdvertisement(mdns.tcp('http'), 4321, {
    name: "BigScreen@" + (os.hostname())
  });

  ad.start();

  app = express();

  app.use(express.json());

  app.post('/url', function(req, res) {
    return receiveCommand(req.body.command);
  });

  app.post('/play', function(req, res) {
    return receiveCommand(req.body.command);
  });

  app.post('/open', function(req, res) {
    return receiveCommand(req.body.command);
  });

  app.post('/stream', function(req, res) {
    return receiveCommand(req.body.command);
  });

  app.get('/stream/:file', function(req, res) {
    var proc;
    res.contentType('flv');
    return proc = new ffmpeg({
      source: stream[req.params.file],
      nolog: true
    }).usingPreset("flashvideo").writeToStream(res, function(retcode, error) {
      if (!error) {
        console.log("file has been converted succesfully");
      }
      if (error) {
        return console.log(error);
      }
    });
  });

  app.listen(4321);

  makeRequest = function(server, params) {
    var options;
    if (params == null) {
      params = {};
    }
    options = {
      uri: "http://" + server.host + ":" + server.port + "/url",
      json: params
    };
    return request.post(options, function(error, response, body) {
      console.log(error);
      return console.log(body);
    });
  };

  requestCommand = function(command) {
    var params;
    params = {
      command: command
    };
    return makeRequest(servers["BigScreen@" + (os.hostname())], params);
  };

  browser = mdns.createBrowser(mdns.tcp('http'));

  servers = {};

  browser.on('serviceUp', function(service) {
    console.log('service up: ', service.name);
    return servers[service.name] = service;
  });

  browser.on('serviceDown', function(service) {
    console.log('service down: ', service.name);
    return delete servers[service.name];
  });

  browser.start();

  rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on("line", function(line) {
    console.log("Line: ", line);
    return requestCommand(line.trim());
  });

}).call(this);
