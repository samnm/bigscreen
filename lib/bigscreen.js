// Generated by CoffeeScript 1.4.0
(function() {
  var ad, app, browser, exec, executeCommand, executeOpen, executeStream, executeWatch, express, ffmpeg, makeRequest, mdns, os, parseOpenCommand, parsePlainTextCommand, parseStreamCommand, parseWatchCommand, puts, readline, request, requestCommand, rl, servers, streams, sys;

  mdns = require('mdns');

  express = require('express');

  sys = require('sys');

  exec = require('child_process').exec;

  os = require('os');

  ffmpeg = require('fluent-ffmpeg');

  request = require('request');

  readline = require('readline');

  String.prototype.hashCode = function() {
    var char, hash, i;
    hash = 0;
    if (this.length === 0) {
      return hash;
    }
    i = 0;
    char = 0;
    while (i < this.length) {
      char = this.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
      i++;
    }
    return hash.toString();
  };

  /* 
    Server
  */


  puts = function(error, stdout, stderr) {
    return sys.puts(stdout);
  };

  executeCommand = function(command) {
    switch (command.type) {
      case 'watch':
        return executeWatch(command);
      case 'open':
        return executeOpen(command);
      case 'stream':
        return executeStream(command);
      default:
        return console.log("Received bad command, ", command);
    }
  };

  executeOpen = function(command) {
    return exec("open " + command.url, puts);
  };

  executeWatch = function(command) {};

  executeStream = function(command) {
    return exec("open -a MPlayerX.app --args -url " + command.url);
  };

  ad = mdns.createAdvertisement(mdns.tcp('http'), 4321, {
    name: "BigScreen@" + (os.hostname())
  });

  ad.start();

  app = express();

  app.use(express.json());

  app.post('/url', function(req, res) {
    return executeCommand(req.body.command);
  });

  app.post('/play', function(req, res) {
    return executeCommand(req.body.command);
  });

  app.post('/open', function(req, res) {
    return executeCommand(req.body.command);
  });

  app.post('/stream', function(req, res) {
    return executeCommand(req.body.command);
  });

  streams = {};

  app.get('/stream/:uuid', function(req, res) {
    var proc;
    res.contentType('flv');
    proc = new ffmpeg({
      source: streams[req.params.uuid],
      nolog: true
    }).toFormat('flv').updateFlvMetadata().withVideoBitrate('512k').withVideoCodec('libx264').withFps(24).withAudioBitrate('96k').withAudioCodec('libfaac').withAudioFrequency(22050).withAudioChannels(2).writeToStream(res, function(retcode, error) {
      if (!error) {
        console.log("file has been converted succesfully");
      }
      if (error) {
        return console.log(error);
      }
    });
    return delete streams[req.params.uuid];
  });

  app.listen(4321);

  /* 
    Client
  */


  makeRequest = function(server, params) {
    var options;
    if (params == null) {
      params = {};
    }
    options = {
      uri: "http://" + server.host + ":" + server.port + "/url",
      json: params
    };
    return request.post(options, function(error, response, body) {
      console.log(error);
      return console.log(body);
    });
  };

  requestCommand = function(rawCommand) {
    var params;
    params = {
      command: parsePlainTextCommand(rawCommand)
    };
    return makeRequest(servers["BigScreen@" + (os.hostname())], params);
  };

  parseWatchCommand = function(url) {
    return {
      type: 'watch',
      url: url
    };
  };

  parseOpenCommand = function(url) {
    return {
      type: 'open',
      url: url
    };
  };

  parseStreamCommand = function(filename) {
    var hash;
    filename = filename.split('\\').join('');
    hash = filename.hashCode();
    streams[hash] = filename;
    return {
      type: 'stream',
      url: "http://" + (os.hostname()) + ":4321/stream/" + hash
    };
  };

  parsePlainTextCommand = function(raw) {
    var body, command, components;
    components = raw.split(' ');
    command = components[0];
    body = raw.substring(components[0].length + 1);
    switch (components[0]) {
      case 'watch':
        return parseWatchCommand(body);
      case 'open':
        return parseOpenCommand(body);
      case 'stream':
        return parseStreamCommand(body);
      default:
        return parseOpenCommand(raw);
    }
  };

  browser = mdns.createBrowser(mdns.tcp('http'));

  servers = {};

  browser.on('serviceUp', function(service) {
    console.log('service up: ', service.name);
    if (service.name.indexOf('BigScreen@') === 0) {
      return servers[service.name] = service;
    }
  });

  browser.on('serviceDown', function(service) {
    console.log('service down: ', service.name);
    if (service.name.indexOf('BigScreen@') === 0) {
      return delete servers[service.name];
    }
  });

  browser.start();

  rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on("line", function(line) {
    return requestCommand(line.trim());
  });

}).call(this);
